{
  "hash": "46509e1b87037017090fcbb152d46295",
  "result": {
    "markdown": "---\nlecture: \"Organization and reports\"\nformat: revealjs\nmetadata-files: \n  - _metadata.yml\n---\n## {{< meta lecture >}} {.large background-image=\"img/consult.jpeg\" background-opacity=\"0.3\"}\n\n[Stat 550]{.secondary}\n\n[{{< meta author >}}]{.secondary}\n\nLast modified -- 06 February 2024\n\n\n\n$$\n\\DeclareMathOperator*{\\argmin}{argmin}\n\\DeclareMathOperator*{\\argmax}{argmax}\n\\DeclareMathOperator*{\\minimize}{minimize}\n\\DeclareMathOperator*{\\maximize}{maximize}\n\\DeclareMathOperator*{\\find}{find}\n\\DeclareMathOperator{\\st}{subject\\,\\,to}\n\\newcommand{\\E}{E}\n\\newcommand{\\Expect}[1]{\\E\\left[ #1 \\right]}\n\\newcommand{\\Var}[1]{\\mathrm{Var}\\left[ #1 \\right]}\n\\newcommand{\\Cov}[2]{\\mathrm{Cov}\\left[#1,\\ #2\\right]}\n\\newcommand{\\given}{\\mid}\n\\newcommand{\\X}{\\mathbf{X}}\n\\newcommand{\\x}{\\mathbf{x}}\n\\newcommand{\\y}{\\mathbf{y}}\n\\newcommand{\\P}{\\mathcal{P}}\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\norm}[1]{\\left\\lVert #1 \\right\\rVert}\n\\newcommand{\\snorm}[1]{\\lVert #1 \\rVert}\n\\newcommand{\\tr}[1]{\\mbox{tr}(#1)}\n\\newcommand{\\U}{\\mathbf{U}}\n\\newcommand{\\D}{\\mathbf{D}}\n\\newcommand{\\V}{\\mathbf{V}}\n$$\n\n\n\n\n\n## Topics for today\n\n1. Organizing your file system\n2. Writing reports that mix output and text\n3. (Avoiding buggy code)\n\n## The guiding theme\n\n![](https://imgs.xkcd.com/comics/is_it_worth_the_time.png){.center}\n\n\n# Organization {background-color=\"#e98a15\"}\n\n* Students come to my office\n* All their stuff is on their Desktop\n* This is ðŸ¤®\n\n## I urge you to consult:\n\n[Karl Broman's Notes](https://kbroman.org/Tools4RR/assets/lectures/06_org_eda_withnotes.pdf)\n\n\n## Some guiding principles\n\n1. Avoid naming by date. \n    - Your file system already knows the date.\n    - Sometimes projects take a while.\n    - You can add this inside a particular report: `Last updated: 2022-01-07`\n1. If you're going to use a date anywhere, do `YYYY-MM-DD` or `YYYYMMDD` not `DD-MMM-YY`\n1. This is a process\n1. Don't get tied down\n1. But don't reorganize every time you find a better system\n1. Customize to your needs, preferences\n \n\n## Organizing your stuff\n\n\n```{.bash}\nâ”œâ”€â”€ Advising\nâ”‚   â”œâ”€â”€ arash\nâ”‚   â”œâ”€â”€ gian-carlo\nâ”œâ”€â”€ CV\nâ”œâ”€â”€ Computing\nâ”‚   â”œâ”€â”€ batchtools.slurm.tmpl\nâ”‚   â”œâ”€â”€ computecanada_notes.md\nâ”‚   â”œâ”€â”€ FKF\nâ”‚   â””â”€â”€ ghclass\nâ”œâ”€â”€ Grants\nâ”‚   â”œâ”€â”€ B&E JSM 2010\nâ”‚   â”œâ”€â”€ CANSSI RRP 2020\nâ”‚   â”œâ”€â”€ NSERC 2020\nâ”œâ”€â”€ LettersofRec\nâ”œâ”€â”€ Manuscripts\n|   â”œâ”€â”€ learning-white-matter\n|   â”œâ”€â”€ rt-est\nâ”‚   â”œâ”€â”€ zzzz Old\nâ”œâ”€â”€ Referee reports\nâ”œâ”€â”€ Talks\nâ”‚   â”œâ”€â”€ JobTalk2020\nâ”‚   â”œâ”€â”€ ubc-stat-covid-talk\nâ”‚   â””â”€â”€ utoronto-grad-advice\nâ”œâ”€â”€ Teaching\nâ”‚   â”œâ”€â”€ stat-406\nâ”‚   â”œâ”€â”€ stat-550\nâ”‚   â”œâ”€â”€ zzzz CMU TA\nâ”‚   â””â”€â”€ zzzz booth\nâ””â”€â”€ Website\n```\n\n\n\n## Inside a project\n\n```{.bash}\n.\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ Summary of Goals.rtf\nâ”œâ”€â”€ cluster_output\nâ”œâ”€â”€ code\nâ”œâ”€â”€ data\nâ”œâ”€â”€ dsges-github.Rproj\nâ”œâ”€â”€ manuscript\nâ””â”€â”€ waldman-triage\n```\n\n* Include a README\n* Ideally have a MAKEFILE\n* Under version control, shared with collaborator\n\n\n## Basic principles\n\n* Be consistent\n    â€“ directory structure; names\n    - all project files in 1 directory, not multiples\n* Always separate raw from processed data\n* Always separate code from data\n* It should be obvious what code created what files, and what the dependencies are. (MAKEFILE forces this)\n* [No hand-editing of data files]{.secondary}\n* Donâ€™t use spaces in file names\n* In code, use relative paths, not absolute paths\n  - `../blah` not `~/blah` or `/users/dajmcdon/Documents/Work/proj-1/blah`\n  - The `{here}` package in `R` is great for this\n  \n## Problem: Coordinating with collaborators\n\n* Where to put data that multiple people will work with?\n* Where to put intermediate/processed data?\n* Where to indicate the code that created those processed data files?\n* How to divvy up tasks and know who did what?\n* Need to agree on directory structure and file naming conventions\n\n[GitHub is (I think) the ideal solution, but not always feasible.]{.secondary}\n\n## Problem: Collaborators who donâ€™t use GitHub\n\n* Use GitHub yourself\n* Copy files to/from some shared space\n    - Ideally, in an automated way (Dropbox, S3 Bucket)\n    - Avoid Word at all costs. Google Docs if needed.\n    - Word and Git do not mix\n    - [Last resort:]{.secondary} Word file in Dropbox. Everything else nicely organized on your end. Rmd file with similar structure to Manuscript that does the analysis.\n* Commit their changes.\n\n. . .\n\nOverleaf has Git built in (paid tier). I don't like Overleaf. Costs money, the viewer is crap and so is the editor. I suggest you avoid it.\n\n# Reports that mix output and text {background-color=\"#e98a15\"}\n\n## Using Rmarkdown/Quarto/Jupyter for most things\n\n### Your goal is to [Avoid at all costs]{.secondary}:\n\n* \"How did I create this plot?\"\n* \"Why did I decide to omit those six samples?\"\n* \"Where (on the web) did I find these data?\"\n* \"What was that interesting gene/feature/predictor?\"\n\n<hr>\n \nReally useful resource:\n\n* Emily Reiderer [RmdDD](https://emilyriederer.netlify.app/post/rmarkdown-driven-development/)\n* Talk [Slides](https://www.slideshare.net/EmilyRiederer/rmarkdown-driven-development-rstudioconf-2020)\n\n## When I begin a new project\n\n1. Create a directory structure\n    - `code/`\n    - `papers/`\n    - `notes/` (maybe?)\n    - `README.md`\n    - `data/` (maybe?)\n1. Write scripts in the `code/` directory\n1. TODO items in the README\n1. Use Rmarkdown/Quarto/Jupyter for reports, render to `.pdf`\n\n## As the project progresses...\n\nReorganize\n\n* Some script files go to a package (thorougly tested), all that remains is for the paper\n* These now load the package and run simulations or analyses (that take a while)\n* Maybe add a directory that contains dead-ends (code or text or ...)\n* Add `manuscript/`. I try to go for `main.tex` and `Supplement.Rmd`\n* `Supplement.Rmd` runs anything necessary in `code/` and creates all figures in the main doc and the supplement. Also generates any online supplementary material\n* Sometimes, just `manuscript/main.Rmd` \n* Sometimes `main.tex` just inputs `intro.tex`, `methods.tex`, etc.\n\n## The old manuscript (starting in School, persisting too long)\n\n1. Write lots of LaTeX, `R` code in separate files\n1. Need a figure. Run `R` code, get figure, save as `.pdf`.\n1. Recompile LaTeX. Axes are unreadable. Back to `R`, rerun `R` code, ...\n1. Recompile LaTeX. Can't distinguish lines. Back to `R`, rerun `R` code, ...\n1. Collaborator wants changes to the simulation. Edit the code. Rerun figure script, doesn't work. More edits....Finally Recompile.\n1. Reviewer \"what if `n` is bigger\". Hope I can find the right location. But the code isn't functions. Something breaks ...\n1. Etc, etc.\n\n## Now: \n\n\n1. `R` package with documented code, available on GitHub.  \n1. One script to run the analysis, one to gather the results.  \n1. One `.Rmd` file to take in the results, do preprocessing, generate all figures.  \n1. LaTeX file on Journal style.\n\n### The optimal\n\nSame as above but with a MAKEFILE to automatically run parts of 1--4 as needed\n\n\n\n\n## Evolution of presentations\n\n1. LaTeX + Beamer (similar to the manuscript):\n    a. Write lots of LaTeX, `R` code in separate files\n    a. Need a figure. Run `R` code, get figure, save as `.pdf`.\n    a. Rinse and repeat.\n1. Course slides in Rmarkdown + Slidy\n1. Seminars in Rmarkdown + Beamer (with lots of customization)\n1. Seminars in Rmarkdown + Xaringan\n1. Everything in Quarto\n\n::: {.callout-tip appearance=\"simple\"}\n* Easy to use.\n* Easy to customize (defaults are not great)\n* WELL DOCUMENTED\n:::\n\n\n## Takeaways",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}